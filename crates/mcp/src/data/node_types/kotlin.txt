constructor_invocation: children=user_type, value_arguments*
when_subject: children=additive_expression, annotation, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, variable_declaration, when_expression*?
delegation_specifier: children=constructor_invocation, explicit_delegation, function_type, user_type
do_while_statement: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, control_structure_body, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
setter: children=function_body, function_type, modifiers, not_nullable_type, nullable_type, parameter_with_optional_type, parenthesized_type, type_modifiers, user_type*?
variable_declaration: children=function_type, not_nullable_type, nullable_type, parenthesized_type, simple_identifier, type_modifiers, user_type*
value_arguments: children=value_argument*?
while_statement: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, control_structure_body, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
collection_literal: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
primary_constructor: children=class_parameter, modifiers*?
nullable_type: children=parenthesized_type, user_type?
type_arguments: children=type_projection*
parameter: children=function_type, not_nullable_type, nullable_type, parenthesized_type, simple_identifier, type_modifiers, user_type*
try_expression: children=catch_block, finally_block, statements*
unsigned_literal: children=bin_literal, hex_literal, integer_literal
getter: children=function_body, function_type, modifiers, not_nullable_type, nullable_type, parenthesized_type, type_modifiers, user_type*?
when_entry: children=control_structure_body, when_condition*
class_parameter: children=additive_expression, anonymous_function, as_expression, bin_literal, binding_pattern_kind, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, function_type, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, modifiers, multiplicative_expression, navigation_expression, not_nullable_type, nullable_type, object_literal, parenthesized_expression, parenthesized_type, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, type_modifiers, unsigned_literal, user_type, when_expression*
comparison_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
property_delegate: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression?
user_type: children=type_arguments, type_identifier*
as_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, function_type, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, not_nullable_type, nullable_type, object_literal, parenthesized_expression, parenthesized_type, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, type_modifiers, unsigned_literal, user_type, when_expression*?
enum_entry: children=class_body, modifiers, simple_identifier, value_arguments*
property_declaration: children=additive_expression, anonymous_function, as_expression, bin_literal, binding_pattern_kind, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, getter, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, modifiers, multi_variable_declaration, multiplicative_expression, navigation_expression, nullable_type, object_literal, parenthesized_expression, parenthesized_type, postfix_expression, prefix_expression, property_delegate, range_expression, real_literal, setter, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, type_constraints, type_modifiers, type_parameters, unsigned_literal, user_type, variable_declaration, when_expression*
import_list: children=import_header*
interpolated_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression?
super_expression: children=function_type, not_nullable_type, nullable_type, parenthesized_type, type_identifier, type_modifiers, user_type*?
if_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, control_structure_body, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
object_declaration: children=class_body, delegation_specifier, modifiers, type_identifier*
parenthesized_user_type: children=parenthesized_user_type, user_type
for_statement: children=additive_expression, annotation, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, control_structure_body, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multi_variable_declaration, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, variable_declaration, when_expression*
navigation_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, navigation_suffix, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*
type_alias: children=function_type, modifiers, not_nullable_type, nullable_type, parenthesized_type, type_identifier, type_modifiers, type_parameters, user_type*
anonymous_initializer: children=statements?
finally_block: children=statements?
callable_reference: children=simple_identifier, type_identifier*?
import_header: children=identifier, import_alias, wildcard_import*
call_suffix: children=annotated_lambda, type_arguments, value_arguments*
check_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, function_type, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, not_nullable_type, nullable_type, object_literal, parenthesized_expression, parenthesized_type, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, type_modifiers, unsigned_literal, user_type, when_expression*?
parenthesized_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression?
companion_object: children=class_body, delegation_specifier, modifiers, type_identifier*?
indexing_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, indexing_suffix, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*
type_projection: children=function_type, not_nullable_type, nullable_type, parenthesized_type, type_modifiers, type_projection_modifiers, user_type*?
call_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, call_suffix, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*
lambda_literal: children=lambda_parameters, statements*?
type_constraints: children=type_constraint*
annotation: children=constructor_invocation, use_site_target, user_type*
type_test: children=function_type, not_nullable_type, nullable_type, parenthesized_type, type_modifiers, user_type*?
secondary_constructor: children=constructor_delegation_call, function_value_parameters, modifiers, statements*
when_condition: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, range_test, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, type_test, unsigned_literal, when_expression?
anonymous_function: children=function_body, function_type, function_value_parameters, not_nullable_type, nullable_type, parenthesized_type, type_arguments, type_identifier, type_modifiers, user_type*
parenthesized_type: children=function_type, not_nullable_type, nullable_type, parenthesized_type, type_modifiers, user_type*?
multiplicative_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
package_header: children=identifier
type_constraint: children=annotation, function_type, not_nullable_type, nullable_type, parenthesized_type, type_identifier, type_modifiers, user_type*
function_body: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, statements, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression?
character_literal: children=character_escape_seq?
control_structure_body: children=additive_expression, annotation, anonymous_function, as_expression, assignment, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, class_declaration, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, do_while_statement, elvis_expression, equality_expression, for_statement, function_declaration, getter, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, label, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_declaration, object_literal, parenthesized_expression, postfix_expression, prefix_expression, property_declaration, range_expression, real_literal, setter, simple_identifier, spread_expression, statements, string_literal, super_expression, this_expression, try_expression, type_alias, unsigned_literal, when_expression, while_statement*?
type_parameters: children=type_parameter*
statements: children=additive_expression, annotation, anonymous_function, as_expression, assignment, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, class_declaration, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, do_while_statement, elvis_expression, equality_expression, for_statement, function_declaration, getter, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, label, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_declaration, object_literal, parenthesized_expression, postfix_expression, prefix_expression, property_declaration, range_expression, real_literal, setter, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, type_alias, unsigned_literal, when_expression, while_statement*?
directly_assignable_expression: children=anonymous_function, bin_literal, boolean_literal, callable_reference, character_literal, collection_literal, hex_literal, if_expression, indexing_suffix, integer_literal, jump_expression, lambda_literal, long_literal, navigation_suffix, object_literal, parenthesized_expression, real_literal, simple_identifier, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
function_declaration: children=function_body, function_type, function_value_parameters, modifiers, not_nullable_type, nullable_type, parenthesized_type, simple_identifier, type_constraints, type_modifiers, type_parameters, user_type*
indexing_suffix: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
lambda_parameters: children=multi_variable_declaration, variable_declaration*
constructor_delegation_call: children=value_arguments
type_modifiers: children=annotation*?
prefix_expression: children=additive_expression, annotation, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, label, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
function_value_parameters: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parameter, parameter_modifiers, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
import_alias: children=type_identifier
class_body: children=anonymous_initializer, class_declaration, companion_object, function_declaration, getter, object_declaration, property_declaration, secondary_constructor, setter, type_alias*?
spread_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression?
infix_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*
not_nullable_type: children=parenthesized_user_type, type_modifiers, user_type*
string_literal: children=interpolated_expression, interpolated_identifier, string_content*?
disjunction_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
annotated_lambda: children=annotation, label, lambda_literal*
identifier: children=simple_identifier*
long_literal: children=bin_literal, hex_literal, integer_literal
navigation_suffix: children=parenthesized_expression, simple_identifier?
parameter_with_optional_type: children=function_type, not_nullable_type, nullable_type, parameter_modifiers, parenthesized_type, simple_identifier, type_modifiers, user_type*
conjunction_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
elvis_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
catch_block: children=annotation, function_type, not_nullable_type, nullable_type, parenthesized_type, simple_identifier, statements, type_modifiers, user_type*
modifiers: children=annotation, class_modifier, function_modifier, inheritance_modifier, member_modifier, parameter_modifier, platform_modifier, property_modifier, visibility_modifier*
assignment: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, directly_assignable_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*
postfix_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression?
range_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
source_file: children=additive_expression, annotation, anonymous_function, as_expression, assignment, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, class_declaration, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, do_while_statement, elvis_expression, equality_expression, file_annotation, for_statement, function_declaration, getter, hex_literal, if_expression, import_list, indexing_expression, infix_expression, integer_literal, jump_expression, label, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_declaration, object_literal, package_header, parenthesized_expression, postfix_expression, prefix_expression, property_declaration, range_expression, real_literal, setter, shebang_line, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, type_alias, unsigned_literal, when_expression, while_statement*?
file_annotation: children=constructor_invocation, user_type*
type_parameter: children=function_type, not_nullable_type, nullable_type, parenthesized_type, type_identifier, type_modifiers, type_parameter_modifiers, user_type*
value_argument: children=additive_expression, annotation, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
jump_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, label, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
parameter_modifiers: children=annotation, parameter_modifier*
enum_class_body: children=anonymous_initializer, class_declaration, companion_object, enum_entry, function_declaration, getter, object_declaration, property_declaration, secondary_constructor, setter, type_alias*?
additive_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
object_literal: children=class_body, delegation_specifier*
type_projection_modifiers: children=variance_modifier*
class_declaration: children=class_body, delegation_specifier, enum_class_body, modifiers, primary_constructor, type_constraints, type_identifier, type_parameters*
explicit_delegation: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, function_type, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, user_type, when_expression*
function_type_parameters: children=function_type, not_nullable_type, nullable_type, parameter, parenthesized_type, type_modifiers, user_type*?
range_test: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression?
multi_variable_declaration: children=variable_declaration*
equality_expression: children=additive_expression, anonymous_function, as_expression, bin_literal, boolean_literal, call_expression, callable_reference, character_literal, check_expression, collection_literal, comparison_expression, conjunction_expression, disjunction_expression, elvis_expression, equality_expression, hex_literal, if_expression, indexing_expression, infix_expression, integer_literal, jump_expression, lambda_literal, long_literal, multiplicative_expression, navigation_expression, object_literal, parenthesized_expression, postfix_expression, prefix_expression, range_expression, real_literal, simple_identifier, spread_expression, string_literal, super_expression, this_expression, try_expression, unsigned_literal, when_expression*?
type_parameter_modifiers: children=annotation, reification_modifier, variance_modifier*
function_type: children=function_type, function_type_parameters, not_nullable_type, nullable_type, parenthesized_type, type_arguments, type_identifier, type_modifiers, user_type*
this_expression: children=type_identifier?
when_expression: children=when_entry, when_subject*?